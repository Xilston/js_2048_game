{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _type_of(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n/* eslint-disable */ // #region globalVars\nvar gameTable = document.getElementById(\"game-table\");\nvar tableRows = gameTable.getElementsByTagName(\"tr\");\nvar start = document.getElementById(\"start\");\nvar messageStart = document.getElementById(\"message-start\");\nvar messageWin = document.getElementById(\"message-win\");\nvar messageLose = document.getElementById(\"message-lose\");\nvar gameScore = document.getElementById(\"game-score\");\n// #endregion\n// #region game\nvar Game = /*#__PURE__*/ function() {\n    function Game() {\n        _class_call_check(this, Game);\n        this.size = 4;\n        this.chipsArray = [];\n        this.status = false;\n        this.score = 0;\n        this.win = false;\n        this.gameOver = false;\n    }\n    _create_class(Game, [\n        {\n            key: \"startGame\",\n            value: function startGame() {\n                this.status = true;\n                this.chipsArray = [];\n                this.score = 0;\n                this.win = false;\n                this.gameOver = false;\n                for(var i = 0; i < this.size; i++){\n                    var row = [];\n                    for(var j = 0; j < this.size; j++)row.push(new Chip(0));\n                    this.chipsArray.push(row);\n                }\n                for(var i1 = 0; i1 < 2; i1++)this.addChip(new Chip(gen2or4()));\n            }\n        },\n        {\n            key: \"addChip\",\n            value: function addChip(chip) {\n                var freeSpaces = findFreeSpaces(this.chipsArray);\n                if (freeSpaces.length) {\n                    var _genRandomPosition = genRandomPosition(freeSpaces), x = _genRandomPosition.x, y = _genRandomPosition.y;\n                    this.chipsArray[y][x] = chip;\n                } else console.log(\"no free space\");\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.startGame();\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var chips = this.chipsArray;\n                var isMove = false;\n                for(var i = 0; i < chips.length; i++)for(var j = 1; j < chips.length; j++){\n                    var current = chips[i][j];\n                    if (current.value !== 0) {\n                        var targetCellIndex = j - calcTargetCellIndex(j, chips[i], \"left\");\n                        var moved = this.moveTiles(current, chips[i][targetCellIndex]);\n                        if (moved === true && isMove === false) isMove = true;\n                    }\n                }\n                if (isMove === true) this.addChip(new Chip(gen2or4()));\n                else this.isGameOver();\n                this.resetTiles();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var chips = this.chipsArray;\n                var isMove = false;\n                for(var i = 1; i < chips.length; i++)for(var j = 0; j < chips.length; j++){\n                    var current = chips[i][j];\n                    if (current.value !== 0) {\n                        var targetCellIndex = i - calcTargetCellIndex({\n                            y: i,\n                            x: j\n                        }, chips, \"up\");\n                        var moved = this.moveTiles(current, chips[targetCellIndex][j]);\n                        if (moved === true && isMove === false) isMove = true;\n                    }\n                }\n                if (isMove === true) this.addChip(new Chip(gen2or4()));\n                else this.isGameOver();\n                this.resetTiles();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var chips = this.chipsArray;\n                var isMove = false;\n                for(var i = this.size - 2; i >= 0; i--)for(var j = 0; j < chips.length; j++){\n                    var current = chips[i][j];\n                    if (current.value !== 0) {\n                        var targetCellIndex = i + calcTargetCellIndex({\n                            y: i,\n                            x: j\n                        }, chips, \"down\");\n                        var moved = this.moveTiles(current, chips[targetCellIndex][j]);\n                        if (moved === true && isMove === false) isMove = true;\n                    }\n                }\n                if (isMove === true) this.addChip(new Chip(gen2or4()));\n                else this.isGameOver();\n                this.resetTiles();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var chips = this.chipsArray;\n                var isMove = false;\n                for(var i = 0; i < this.size; i++)for(var j = this.size - 2; j >= 0; j--){\n                    var current = chips[i][j];\n                    if (current.value !== 0) {\n                        var targetCellIndex = j + calcTargetCellIndex(j, chips[i], \"right\");\n                        var moved = this.moveTiles(current, chips[i][targetCellIndex]);\n                        if (moved === true && isMove === false) isMove = true;\n                    }\n                }\n                if (isMove === true) this.addChip(new Chip(gen2or4()));\n                else this.isGameOver();\n                this.resetTiles();\n            }\n        },\n        {\n            key: \"moveTiles\",\n            value: function moveTiles(currentTile, nextTile) {\n                if (currentTile !== nextTile) {\n                    var res = nextTile.merge(currentTile);\n                    game.score += res;\n                    if (res === 2048) this.win = true;\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                var _this = this, _loop = function(i) {\n                    var _this1 = _this, _loop = function(j) {\n                        var currentTile = _this1.chipsArray[i][j];\n                        var closestTiles = Game.getClosestTiles(i, j, _this1.chipsArray);\n                        over = closestTiles.every(function(tile) {\n                            return tile.value !== currentTile.value;\n                        });\n                        if (over === false) {\n                            _this1.gameOver = false;\n                            return {\n                                v: over\n                            };\n                        }\n                    };\n                    for(var j = 0; j < _this.size; j++){\n                        var _ret = _loop(j);\n                        if (_type_of(_ret) === \"object\") return {\n                            v: _ret.v\n                        };\n                    }\n                };\n                var over = true;\n                for(var i = 0; i < this.size; i++){\n                    var _ret = _loop(i);\n                    if (_type_of(_ret) === \"object\") return _ret.v;\n                }\n                this.gameOver = true;\n                return true;\n            }\n        },\n        {\n            key: \"resetTiles\",\n            value: function resetTiles() {\n                for(var i = 0; i < this.size; i++)for(var j = 0; j < this.size; j++)this.chipsArray[i][j].resetMerge();\n            }\n        }\n    ], [\n        {\n            key: \"getClosestTiles\",\n            value: function getClosestTiles(i, j, arr) {\n                var res = [];\n                if (j > 0) res.push(arr[i][j - 1]);\n                if (j < arr[0].length - 1) res.push(arr[i][j + 1]);\n                if (i > 0) res.push(arr[i - 1][j]);\n                if (i < arr.length - 1) res.push(arr[i + 1][j]);\n                return res;\n            }\n        }\n    ]);\n    return Game;\n}();\nvar Chip = /*#__PURE__*/ function() {\n    function Chip(num) {\n        _class_call_check(this, Chip);\n        this.value = num;\n        this.ableToUnion = true;\n    }\n    _create_class(Chip, [\n        {\n            key: \"merge\",\n            value: function merge(chip) {\n                var res = 0;\n                if (this.value === 0 || this.value === chip.value) {\n                    if (this.value > 0 && chip.value > 0) {\n                        res += this.value + chip.value;\n                        this.ableToUnion = false;\n                    }\n                    this.value += chip.value;\n                    chip.value = 0;\n                }\n                return res;\n            }\n        },\n        {\n            key: \"resetMerge\",\n            value: function resetMerge() {\n                this.ableToUnion = true;\n            }\n        }\n    ]);\n    return Chip;\n}();\n// #endregion\nvar game = new Game();\n// #region pageFunc\nstart.addEventListener(\"click\", function() {\n    if (game.status === false) {\n        startGame();\n        syncWithTable();\n        messageStart.classList.add(\"hidden\");\n        start.classList.remove(\"start\");\n        start.classList.add(\"restart\");\n        start.innerText = \"restart\";\n    } else {\n        clearTable();\n        restartGame();\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    }\n});\ndocument.addEventListener(\"keydown\", function(event) {\n    if (game.status === true) switch(event.key){\n        case \"ArrowUp\":\n            game.moveUp();\n            syncWithTable();\n            break;\n        case \"ArrowDown\":\n            game.moveDown();\n            syncWithTable();\n            break;\n        case \"ArrowLeft\":\n            game.moveLeft();\n            syncWithTable();\n            break;\n        case \"ArrowRight\":\n            game.moveRight();\n            syncWithTable();\n            break;\n        default:\n    }\n});\nfunction syncWithTable() {\n    var chips = game.chipsArray;\n    for(var i = 0; i < chips.length; i++)for(var j = 0; j < chips[i].length; j++){\n        var cell = tableRows[i].children[j];\n        var chip = chips[i][j];\n        var prevChipValue = cell.innerText;\n        var merge = prevChipValue * 2 === chip.value ? \"merged \" : \"\";\n        if (chip.value !== 0) {\n            cell.innerHTML = chip.value;\n            cell.className = \"field-cell \".concat(merge, \"field-cell--\").concat(chip.value);\n        } else {\n            cell.innerHTML = \"\";\n            cell.className = \"field-cell\";\n        }\n    }\n    gameScore.innerText = game.score;\n    if (game.win) messageWin.classList.remove(\"hidden\");\n    if (game.gameOver) messageLose.classList.remove(\"hidden\");\n}\nfunction clearTable() {\n    for(var i = 0; i < tableRows.length; i++)for(var j = 0; j < tableRows.length; j++){\n        var cell = tableRows[i].children[j];\n        cell.innerHTML = \"\";\n        cell.className = \"field-cell\";\n    }\n}\nfunction startGame() {\n    game.startGame();\n}\nfunction restartGame() {\n    game.restart();\n    syncWithTable();\n}\n// #endregion\n// #region heplFunc\nfunction gen2or4(zero) {\n    var numsArr = [\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        4\n    ];\n    if (zero === 0) return 0;\n    return numsArr[Math.floor(Math.random() * 10)];\n}\nfunction findFreeSpaces(arr) {\n    var freeSpacesArr = [];\n    for(var i = 0; i < arr.length; i++)for(var j = 0; j < arr[i].length; j++){\n        var freeCell = {\n            x: null,\n            y: null\n        };\n        if (arr[i][j].value === 0) {\n            freeCell.x = j;\n            freeCell.y = i;\n            freeSpacesArr.push(freeCell);\n        }\n    }\n    return freeSpacesArr;\n}\nfunction genRandomPosition(positionsArr) {\n    var min = 0;\n    var max = positionsArr.length;\n    var randPos = Math.floor(Math.random() * (max - min) + min);\n    return positionsArr[randPos];\n}\n/* function calcFreeCount(currenIndex, targetArray) {\n  let result = 0;\n\n  for (let i = currenIndex - 1; i >= 0; i--) {\n    if (targetArray[i] === 0) {\n      result++;\n    } else {\n      return result;\n    }\n  }\n\n  return result;\n} */ function calcTargetCellIndex(currIndex, array, direction) {\n    var res = 0;\n    if (direction === \"left\") {\n        for(var i = currIndex - 1; i >= 0; i--)if (array[i].value === 0) res++;\n        else {\n            if (array[i].value === array[currIndex].value && array[i].ableToUnion) res++;\n            else return res;\n        }\n    }\n    if (direction === \"up\") {\n        var y = currIndex.y, x = currIndex.x;\n        for(var i1 = y - 1; i1 >= 0; i1--)if (array[i1][x].value === 0) res++;\n        else {\n            if (array[i1][x].value === array[y][x].value && array[i1][x].ableToUnion) res++;\n            else return res;\n        }\n    }\n    if (direction === \"down\") {\n        var y1 = currIndex.y, x1 = currIndex.x;\n        for(var i2 = y1 + 1; i2 < array.length; i2++)if (array[i2][x1].value === 0) res++;\n        else {\n            if (array[i2][x1].value === array[y1][x1].value && array[i2][x1].ableToUnion) res++;\n            else return res;\n        }\n    }\n    if (direction === \"right\") {\n        for(var i3 = currIndex + 1; i3 < array.length; i3++)if (array[i3].value === 0) res++;\n        else {\n            if (array[i3].value === array[currIndex].value && array[i3].ableToUnion) res++;\n            else return res;\n        }\n    }\n    return res;\n} // #endregion\n\n//# sourceMappingURL=index.ed859869.js.map\n","'use strict';\n/* eslint-disable */\n// #region globalVars\nconst gameTable = document.getElementById('game-table');\nconst tableRows = gameTable.getElementsByTagName('tr');\nconst start = document.getElementById('start');\nconst messageStart = document.getElementById('message-start');\nconst messageWin = document.getElementById('message-win');\nconst messageLose = document.getElementById('message-lose');\nconst gameScore = document.getElementById('game-score');\n// #endregion\n\n// #region game\n\nclass Game {\n  constructor() {\n    this.size = 4;\n    this.chipsArray = [];\n    this.status = false;\n    this.score = 0;\n    this.win = false;\n    this.gameOver = false;\n  }\n\n  startGame() {\n    this.status = true;\n    this.chipsArray = [];\n    this.score = 0;\n    this.win = false;\n    this.gameOver = false;\n\n    for (let i = 0; i < this.size; i++) {\n      const row = [];\n      for (let j = 0; j < this.size; j++) {\n        row.push( new Chip(0));\n      }\n      this.chipsArray.push(row);\n    }\n\n    for (let i = 0; i < 2; i++) {\n      this.addChip(new Chip(gen2or4()));\n    }\n  }\n\n  addChip(chip) {\n    const freeSpaces = findFreeSpaces(this.chipsArray);\n\n    if (freeSpaces.length) {\n      const { x, y } = genRandomPosition(freeSpaces);\n\n      this.chipsArray[y][x] = chip;\n    } else {\n      console.log('no free space');\n    }\n  }\n\n  restart() {\n    this.startGame();\n  }\n\n  moveLeft() {\n    const chips = this.chipsArray;\n    let isMove = false;\n\n    for (let i = 0; i < chips.length; i++) {\n      for (let j = 1; j < chips.length; j++) {\n        const current = chips[i][j];\n\n        if (current.value !== 0) {\n          let targetCellIndex = j - calcTargetCellIndex(j, chips[i], 'left');\n          const moved = this.moveTiles(current, chips[i][targetCellIndex]);\n\n          if (moved === true && isMove === false) {\n            isMove = true;\n          }\n        }\n      }\n    }\n\n    if (isMove === true) {\n      this.addChip(new Chip(gen2or4()));\n    } else {\n      this.isGameOver();\n    }\n\n    this.resetTiles();\n  };\n\n  moveUp() {\n    const chips = this.chipsArray;\n    let isMove = false;\n\n    for (let i = 1; i < chips.length; i++) {\n      for (let j = 0; j < chips.length; j++) {\n        const current = chips[i][j];\n\n        if (current.value !== 0) {\n          let targetCellIndex = i - calcTargetCellIndex({y: i, x: j}, chips, 'up');\n          const moved = this.moveTiles(current, chips[targetCellIndex][j]);\n\n          if (moved === true && isMove === false) {\n            isMove = true;\n          }\n        }\n      }\n    }\n\n    if (isMove === true) {\n      this.addChip(new Chip(gen2or4()));\n    } else {\n      this.isGameOver();\n    }\n\n    this.resetTiles();\n  };\n\n  moveDown() {\n    const chips = this.chipsArray;\n    let isMove = false;\n\n    for (let i = this.size - 2; i >= 0; i--) {\n      for (let j = 0; j < chips.length; j++) {\n        const current = chips[i][j];\n\n        if (current.value !== 0) {\n          let targetCellIndex = i + calcTargetCellIndex({y: i, x: j}, chips, 'down');\n          const moved = this.moveTiles(current, chips[targetCellIndex][j]);\n\n          if (moved === true && isMove === false) {\n            isMove = true;\n          }\n        }\n      }\n    }\n\n    if (isMove === true) {\n      this.addChip(new Chip(gen2or4()));\n    } else {\n      this.isGameOver();\n    }\n\n    this.resetTiles();\n  };\n\n  moveRight() {\n    const chips = this.chipsArray;\n    let isMove = false;\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = this.size - 2; j >= 0; j--) {\n        const current = chips[i][j];\n\n        if (current.value !== 0) {\n          let targetCellIndex = j + calcTargetCellIndex(j, chips[i], 'right');\n          const moved = this.moveTiles(current, chips[i][targetCellIndex]);\n\n          if (moved === true && isMove === false) {\n            isMove = true;\n          }\n        }\n      }\n    }\n\n    if (isMove === true) {\n      this.addChip(new Chip(gen2or4()));\n    } else {\n      this.isGameOver();\n    }\n\n    this.resetTiles();\n  };\n\n  moveTiles(currentTile, nextTile) {\n    if (currentTile !== nextTile) {\n      const res = nextTile.merge(currentTile);\n      game.score += res;\n\n      if (res === 2048) {\n        this.win = true;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  isGameOver() {\n    let over = true;\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const currentTile = this.chipsArray[i][j];\n\n        const closestTiles = Game.getClosestTiles(i, j, this.chipsArray);\n        over = closestTiles.every(\n          tile => tile.value !== currentTile.value\n          );\n        if (over === false) {\n          this.gameOver = false;\n\n          return over;\n        }\n      }\n    }\n\n    this.gameOver = true;\n    return true;\n  }\n\n  resetTiles() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        this.chipsArray[i][j].resetMerge();\n      }\n    }\n  }\n\n  static getClosestTiles(i, j, arr) {\n    const res = [];\n\n    if (j > 0) {\n      res.push(arr[i][j - 1]);\n    }\n\n    if (j < arr[0].length - 1) {\n      res.push(arr[i][j + 1]);\n    }\n\n    if (i > 0) {\n      res.push(arr[i - 1][j]);\n    }\n\n    if (i < arr.length - 1) {\n      res.push(arr[i + 1][j]);\n    }\n\n    return res;\n  }\n}\n\nclass Chip {\n  constructor(num) {\n    this.value = num;\n    this.ableToUnion = true;\n  }\n\n  merge(chip) {\n    let res = 0;\n\n    if (this.value === 0 || this.value === chip.value) {\n      if (this.value > 0 && chip.value > 0) {\n        res += this.value + chip.value;\n        this.ableToUnion = false;\n      }\n\n      this.value += chip.value;\n\n      chip.value = 0;\n    }\n\n    return res;\n  }\n\n  resetMerge() {\n    this.ableToUnion = true;\n  }\n}\n// #endregion\n\nconst game = new Game();\n\n// #region pageFunc\nstart.addEventListener('click', () => {\n  if (game.status === false) {\n    startGame();\n    syncWithTable();\n\n    messageStart.classList.add('hidden');\n\n    start.classList.remove('start');\n    start.classList.add('restart');\n    start.innerText = 'restart';\n  } else {\n    clearTable();\n    restartGame();\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n});\n\ndocument.addEventListener('keydown', (event) => {\n  if (game.status === true) {\n    switch (event.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        syncWithTable();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        syncWithTable();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        syncWithTable();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        syncWithTable();\n        break;\n      default:\n    }\n  }\n});\n\nfunction syncWithTable() {\n  const chips = game.chipsArray;\n\n  for (let i = 0; i < chips.length; i++) {\n    for (let j = 0; j < chips[i].length; j++) {\n      const cell = tableRows[i].children[j];\n      const chip = chips[i][j];\n      const prevChipValue = cell.innerText;\n      const merge = prevChipValue * 2 === chip.value ? 'merged ' : '';\n\n      if (chip.value !== 0) {\n        cell.innerHTML = chip.value;\n        cell.className = `field-cell ${merge}field-cell--${chip.value}`;\n      } else {\n        cell.innerHTML = '';\n        cell.className = 'field-cell';\n      }\n    }\n  }\n\n  gameScore.innerText = game.score;\n\n  if (game.win) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.gameOver) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction clearTable() {\n  for (let i = 0; i < tableRows.length; i++) {\n    for (let j = 0; j < tableRows.length; j++) {\n      const cell = tableRows[i].children[j];\n\n      cell.innerHTML = '';\n      cell.className = 'field-cell';\n    }\n  }\n}\n\nfunction startGame() {\n  game.startGame();\n}\n\nfunction restartGame() {\n  game.restart();\n  syncWithTable();\n}\n\n// #endregion\n\n// #region heplFunc\nfunction gen2or4(zero) {\n  const numsArr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n\n  if (zero === 0) {return 0}\n\n  return numsArr[Math.floor(Math.random() * 10)];\n}\n\nfunction findFreeSpaces(arr) {\n  const freeSpacesArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      const freeCell = {\n        x: null, y: null,\n      };\n\n      if (arr[i][j].value === 0) {\n        freeCell.x = j;\n        freeCell.y = i;\n\n        freeSpacesArr.push(freeCell);\n      }\n    }\n  }\n\n  return freeSpacesArr;\n}\n\nfunction genRandomPosition(positionsArr) {\n  const min = 0;\n  const max = positionsArr.length;\n\n  const randPos = Math.floor(Math.random() * (max - min) + min);\n\n  return positionsArr[randPos];\n}\n\n/* function calcFreeCount(currenIndex, targetArray) {\n  let result = 0;\n\n  for (let i = currenIndex - 1; i >= 0; i--) {\n    if (targetArray[i] === 0) {\n      result++;\n    } else {\n      return result;\n    }\n  }\n\n  return result;\n} */\n\nfunction calcTargetCellIndex(currIndex, array, direction) {\n  let res = 0;\n\n  if (direction === 'left') {\n    for (let i = currIndex - 1; i >= 0; i--) {\n      if (array[i].value === 0) {\n        res++;\n      } else {\n        if (array[i].value === array[currIndex].value && array[i].ableToUnion) {\n          res++;\n        } else {\n        return res;\n        }\n      }\n    }\n  }\n\n  if (direction === 'up') {\n    const {y, x} = currIndex;\n\n    for (let i = y - 1; i >= 0; i--) {\n      if (array[i][x].value === 0) {\n        res++;\n      } else {\n        if (array[i][x].value === array[y][x].value && array[i][x].ableToUnion) {\n          res++;\n        } else {\n        return res;\n        }\n      }\n    }\n  }\n  if (direction === 'down') {\n    const {y, x} = currIndex;\n\n    for (let i = y + 1; i < array.length; i++) {\n      if (array[i][x].value === 0) {\n        res++;\n      } else {\n        if (array[i][x].value === array[y][x].value && array[i][x].ableToUnion) {\n          res++;\n        } else {\n        return res;\n        }\n      }\n    }\n  }\n\n  if (direction === 'right') {\n    for (let i = currIndex + 1; i < array.length; i++) {\n      if (array[i].value === 0) {\n        res++;\n      } else {\n        if (array[i].value === array[currIndex].value && array[i].ableToUnion) {\n          res++;\n        } else {\n        return res;\n        }\n      }\n    }\n  }\n\n\n  return res;\n}\n\n// #endregion\n"],"names":["_class_call_check","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_create_class","protoProps","staticProps","prototype","_type_of","obj","Symbol","constructor","tableRows","gameTable","document","getElementById","getElementsByTagName","start","messageStart","messageWin","messageLose","gameScore","Game","size","chipsArray","status","score","win","gameOver","value","row","j","push","Chip","i1","addChip","gen2or4","chip","freeSpaces","findFreeSpaces","arr","freeSpacesArr","freeCell","x","y","max","_genRandomPosition","positionsArr","Math","floor","random","console","log","startGame","chips","isMove","current","targetCellIndex","calcTargetCellIndex","moveTiles","isGameOver","resetTiles","currentTile","nextTile","res","merge","game","_this","_loop","_ret","_this1","over","closestTiles","getClosestTiles","every","tile","v","resetMerge","num","ableToUnion","syncWithTable","cell","children","prevChipValue","innerText","innerHTML","className","concat","classList","remove","zero","numsArr","currIndex","array","direction","y1","x1","i2","i3","addEventListener","add","clearTable","restart","event","moveUp","moveDown","moveLeft","moveRight"],"version":3,"file":"index.ed859869.js.map"}